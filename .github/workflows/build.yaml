on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
name: build

permissions: read-all

jobs:
  build-windows:
    name: Build ZOT for Windows
    permissions:
      contents: write
      packages: write
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64]
    steps:
      - name: Check out source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags for git describe commands
      
      - name: Install go
        uses: actions/setup-go@v5
        with:
          cache: false
          go-version: 1.23.x
      
      - name: Cache go dependencies
        id: cache-go-dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~\go\pkg\mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('go.mod', 'go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-
      
      - name: Cache go build output
        id: cache-go-build
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('go.mod', 'go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-
      
      - name: Install go dependencies
        if: steps.cache-go-dependencies.outputs.cache-hit != 'true'
        run: go mod download
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      # Use a simple file-based cache for ZUI build without dependencies on non-existent files
      - name: Cache ZUI build
        uses: actions/cache@v4
        id: cache-zui-build
        with:
          path: pkg\extensions\build
          key: ${{ runner.os }}-zui-build-v1
          restore-keys: |
            ${{ runner.os }}-zui-build-
      
      - name: Fetch and build ZUI
        if: steps.cache-zui-build.outputs.cache-hit != 'true'
        run: |
          # Create directories
          $ZUI_DIR = "zui"
          $EXT_DIR = "pkg\extensions\build"
          
          # Clone ZUI repository
          git clone https://github.com/project-zot/zui.git $ZUI_DIR
          
          # Build ZUI
          cd $ZUI_DIR
          npm install
          npm run build
          cd ..
          
          # Create extensions directory if it doesn't exist
          if (-not (Test-Path $EXT_DIR -PathType Container)) {
            New-Item -ItemType Directory -Path $EXT_DIR -Force
          }
          
          # Copy the ZUI build output to extensions directory
          Copy-Item -Path "$ZUI_DIR\build\*" -Destination $EXT_DIR -Recurse -Force
          
          # Log the copied files
          Write-Host "ZUI build files copied to pkg\extensions\build:"
          Get-ChildItem -Path $EXT_DIR -Recurse | Select-Object -First 10
      
      - name: Display ZUI build contents
        if: steps.cache-zui-build.outputs.cache-hit == 'true'
        run: |
          Write-Host "Using cached ZUI build"
          Get-ChildItem -Path "pkg\extensions\build" -Recurse | Select-Object -First 5
      
      - name: Create bin directory
        run: |
          if (-not (Test-Path "bin")) {
            New-Item -ItemType Directory -Path "bin"
          }
      
      - name: Build minimal version
        run: |
          # Fallback values in case git describe fails
          $env:COMMIT_HASH = $(git rev-parse --short HEAD)
          $env:RELEASE_TAG = "dev"
          
          # Try to get more descriptive values if tags exist
          try {
            $env:COMMIT_HASH = $(git describe --always --tags --long)
            $env:RELEASE_TAG = $(git describe --tags --abbrev=0)
          } catch {
            Write-Host "Warning: Unable to get git tag information, using fallback values"
          }
          
          $env:GO_VERSION = (go version) -replace "go version (go\S+) .+", '$1'
          
          $env:CGO_ENABLED = 0
          $env:GOOS = "windows"
          $env:GOARCH = "${{ matrix.arch }}"
          
          $Tags = "containers_image_openpgp,windows"
          $LdFlags = "-X zotregistry.dev/zot/pkg/api/config.ReleaseTag=$env:RELEASE_TAG " +
                     "-X zotregistry.dev/zot/pkg/api/config.Commit=$env:COMMIT_HASH " +
                     "-X zotregistry.dev/zot/pkg/api/config.BinaryType=minimal " +
                     "-X zotregistry.dev/zot/pkg/api/config.GoVersion=$env:GO_VERSION " +
                     "-s -w"
          
          go build -o "bin\zot-windows-${{ matrix.arch }}-minimal.exe" -tags $Tags -v -trimpath -ldflags $LdFlags ./cmd/zot
      
      - name: Build full version
        run: |
          # Fallback values in case git describe fails
          $env:COMMIT_HASH = $(git rev-parse --short HEAD)
          $env:RELEASE_TAG = "dev"
          
          # Try to get more descriptive values if tags exist
          try {
            $env:COMMIT_HASH = $(git describe --always --tags --long)
            $env:RELEASE_TAG = $(git describe --tags --abbrev=0)
          } catch {
            Write-Host "Warning: Unable to get git tag information, using fallback values"
          }
          
          $env:GO_VERSION = (go version) -replace "go version (go\S+) .+", '$1'
          
          $env:CGO_ENABLED = 0
          $env:GOOS = "windows"
          $env:GOARCH = "${{ matrix.arch }}"
          
          $Extensions = "sync,search,scrub,metrics,lint,ui,mgmt,profile,userprefs,imagetrust"
          $Tags = "$Extensions,containers_image_openpgp,windows"
          $BinaryType = "-$($Extensions -replace ',','-')"
          $LdFlags = "-X zotregistry.dev/zot/pkg/api/config.ReleaseTag=$env:RELEASE_TAG " +
                     "-X zotregistry.dev/zot/pkg/api/config.Commit=$env:COMMIT_HASH " +
                     "-X zotregistry.dev/zot/pkg/api/config.BinaryType=$BinaryType " +
                     "-X zotregistry.dev/zot/pkg/api/config.GoVersion=$env:GO_VERSION " +
                     "-s -w"
          
          go build -o "bin\zot-windows-${{ matrix.arch }}.exe" -tags $Tags -v -trimpath -ldflags $LdFlags ./cmd/zot
      
      - name: Build CLI
        run: |
          # Fallback values in case git describe fails
          $env:COMMIT_HASH = $(git rev-parse --short HEAD)
          $env:RELEASE_TAG = "dev"
          
          # Try to get more descriptive values if tags exist
          try {
            $env:COMMIT_HASH = $(git describe --always --tags --long)
            $env:RELEASE_TAG = $(git describe --tags --abbrev=0)
          } catch {
            Write-Host "Warning: Unable to get git tag information, using fallback values"
          }
          
          $env:GO_VERSION = (go version) -replace "go version (go\S+) .+", '$1'
          
          $env:CGO_ENABLED = 0
          $env:GOOS = "windows"
          $env:GOARCH = "${{ matrix.arch }}"
          
          $Tags = "search,containers_image_openpgp,windows"
          $LdFlags = "-X zotregistry.dev/zot/pkg/api/config.Commit=$env:COMMIT_HASH " +
                     "-X zotregistry.dev/zot/pkg/api/config.BinaryType=cli " +
                     "-X zotregistry.dev/zot/pkg/api/config.GoVersion=$env:GO_VERSION " +
                     "-s -w"
          
          go build -o "bin\zli-windows-${{ matrix.arch }}.exe" -tags $Tags -v -trimpath -ldflags $LdFlags ./cmd/zli
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: bin\z*.exe
          if-no-files-found: error
